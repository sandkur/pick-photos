{"version":3,"sources":["App.js","Router.js","serviceWorker.js","index.js"],"names":["API_KEY","API_URL","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","imgs","randomImgs","nullAlert","getPhotos","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","keySearch","api_call","data","wrap","_context","prev","next","preventDefault","value","fetch","sent","json","console","log","results","setState","addForm","reset","stop","_x","inherits","createClass","key","_this2","then","response","_this3","map","img","react_default","createElement","reactstrap_es","md","id","className","top","src","urls","small","description","substring","user","first_name","href","full","target","index_es","icon","randomPhotos","randomImg","name","lg","onSubmit","ref","input","form","type","placeholder","block","fluid","sm","Component","library","add","faStroopwafel","faDownload","faSearch","faCamera","Router","_React$Component","BrowserRouter","Switch","Route","path","component","exact","React","Boolean","window","location","hostname","match","ReactDOM","render","Router_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QAKMA,EAAU,mEAEVC,EAAU,uCAEHC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEQ,MAAQ,CACNC,KAAM,GACNC,WAAY,GACZC,UAAW,IAJflB,EAOEmB,UAPF,eAAAC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAqB,EAAAC,EAAAC,KAOc,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVP,EAAEQ,iBACIP,EAAY3B,EAAK2B,UAAUQ,MAFvBJ,EAAAE,KAAA,EAGaG,MAAK,GAAAtB,OAAIlB,EAAJ,6DAAAkB,OAAuEa,EAAvE,eAAAb,OAA8FnB,IAHhH,cAGJiC,EAHIG,EAAAM,KAAAN,EAAAE,KAAA,EAISL,EAASU,OAJlB,OAIJT,EAJIE,EAAAM,KAKVE,QAAQC,IAAIX,EAAKY,SAEjBzC,EAAK0C,SAAS,CACZ1B,KAAMa,EAAKY,QACXvB,UAAWS,IAGb3B,EAAK2C,QAAQC,QAZH,yBAAAb,EAAAc,SAAApB,EAAAtB,SAPd,gBAAA2C,GAAA,OAAA1B,EAAAP,MAAAV,KAAAE,YAAA,GAAAL,EAAA,OAAAC,OAAA8C,EAAA,EAAA9C,CAAAJ,EAAAC,GAAAG,OAAA+C,EAAA,EAAA/C,CAAAJ,EAAA,EAAAoD,IAAA,oBAAAd,MAAA,WAsBqB,IAAAe,EAAA/C,KACjBiC,MAAK,yDAAAtB,OAA0DnB,IAC5DwD,KAAK,SAAAC,GAAQ,OAAIA,EAASd,SAC1Ba,KAAK,SAAAtB,GAAI,OAAIqB,EAAKR,SAAS,CAC1BzB,WAAYY,QA1BpB,CAAAoB,IAAA,SAAAd,MAAA,WA8BW,IAAAkB,EAAAlD,KACHgB,EAAYhB,KAAKY,MAAMC,KAAKsC,IAAI,SAACC,GACnC,OACAC,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAIV,IAAKM,EAAIK,IACnBJ,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAMG,UAAU,QACdL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAASI,KAAG,EAACC,IAAKR,EAAIS,KAAKC,QAC3BT,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACwB,OAApBH,EAAIW,YAAJ,GAAApD,OAA8BuC,EAAKtC,MAAMG,WAAzC,GAAAJ,OAA0DyC,EAAIW,YAAYC,UAAU,EAAE,IAAtF,QAEJX,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,oBAAuBH,EAAIa,KAAKC,WAAhC,KACAb,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAASY,KAAMf,EAAIS,KAAKO,KAAMC,OAAO,WACnChB,EAAAjC,EAAAkC,cAACgB,EAAA,EAAD,CAAiBC,KAAK,aADxB,sBAUJC,EAAexE,KAAKY,MAAME,WAAWqC,IAAI,SAACsB,GAC5C,OACEpB,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAIV,IAAK2B,EAAUhB,IACzBJ,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAMG,UAAU,QAChBL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAASI,KAAG,EAACC,IAAKa,EAAUZ,KAAKC,QAC/BT,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KAC4B,MAAzBkB,EAAUV,YARJ,mBAQN,GAAApD,OAAgD8D,EAAUV,YAAYC,UAAU,EAAE,IAAlF,QAEHX,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,oBAAuBkB,EAAUR,KAAKS,KAAtC,KACArB,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAASY,KAAMM,EAAUZ,KAAKO,KAAMC,OAAO,WACzChB,EAAAjC,EAAAkC,cAACgB,EAAA,EAAD,CAAiBC,KAAK,aADxB,sBAUV,OACElB,EAAAjC,EAAAkC,cAAA,OAAKG,GAAG,QACNJ,EAAAjC,EAAAkC,cAAA,WAASI,UAAU,cACjBL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKG,UAAU,QACbL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKoB,GAAG,IAAIjB,UAAU,WACpBL,EAAAjC,EAAAkC,cAAA,OAAKI,UAAU,gBACbL,EAAAjC,EAAAkC,cAAA,cAAKD,EAAAjC,EAAAkC,cAACgB,EAAA,EAAD,CAAiBC,KAAK,WAA3B,iBAEFlB,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAAA,QAAMsB,SAAU,SAACrD,GAAD,OAAQ2B,EAAKlC,UAAUO,IAAKmC,UAAU,OAAOmB,IAAK,SAACC,GAAD,OAAY5B,EAAKV,QAAWsC,IAC9FzB,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKwB,MAAI,GACP1B,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKC,GAAG,MACNH,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAAA,SAAO0B,KAAK,OAAOH,IAAK,SAACC,GAAD,OAAY5B,EAAK1B,UAAasD,GAAQpB,UAAU,eAAeuB,YAAY,4BAGvG5B,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKC,GAAG,KACNH,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACAF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAQ2B,OAAK,GAAb,IAAe7B,EAAAjC,EAAAkC,cAACgB,EAAA,EAAD,CAAiBC,KAAK,WAArC,aAUZlB,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKG,UAAU,QACc,IAA3B1D,KAAKY,MAAMC,KAAKV,OAAeqE,EAAexD,KAIpDqC,EAAAjC,EAAAkC,cAAA,UAAQI,UAAU,UAChBL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAW4B,OAAK,GACd9B,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKoB,GAAG,IAAInB,GAAG,IAAI4B,GAAG,KACpB/B,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACIF,EAAAjC,EAAAkC,cAAA,6BACAD,EAAAjC,EAAAkC,cAAA,KAAGa,KAAK,4CAA4CE,OAAO,WAA3D,wBAIRhB,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKoB,GAAG,IAAInB,GAAG,IAAI4B,GAAG,KACpB/B,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAAA,uBACED,EAAAjC,EAAAkC,cAAA,KAAGa,KAAK,wBAAwBE,OAAO,WAAvC,6BAzHtB3E,EAAA,CAAyB2F,oDCDzBC,IAAQC,IAAIC,IAAeC,IAAYC,IAAUC,KAC1C,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA9F,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,GAAA9F,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAA8F,GAAAlF,MAAAV,KAAAE,YAAA,OAAAJ,OAAA8C,EAAA,EAAA9C,CAAA8F,EAAAC,GAAA/F,OAAA+C,EAAA,EAAA/C,CAAA8F,EAAA,EAAA9C,IAAA,SAAAd,MAAA,WAEE,OACCqB,EAAAjC,EAAAkC,cAACwC,EAAA,EAAD,KACCzC,EAAAjC,EAAAkC,cAACyC,EAAA,EAAD,KACC1C,EAAAjC,EAAAkC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWxG,EAAKyG,OAAK,UAL1CP,EAAA,CAA4BQ,IAAMf,iBCGdgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOtD,EAAAjC,EAAAkC,cAACsD,EAAD,MAAYC,SAASC,eAAe,SD0H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC","file":"static/js/main.97acb9c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col,FormGroup, Card, CardBody, CardTitle, CardImg, CardText, Button, NavLink } from 'reactstrap';\nimport {SearchResult} from './Components/SearchResult';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst API_KEY = \"a9f020ade0a6ba6d2ba84ba91345fb4e73fa64ad1c0b6221233b55c6f12c3b29\";\nconst SEC_KEY = \"a58a8b865b6c650eb94003187fae318d94b86e2c538e0c800670f0a7228c11cf\";\nconst API_URL = \"https://cors-anywhere.herokuapp.com/\";\n\nexport class App extends Component {\n  state = {\n    imgs: [],\n    randomImgs: [],\n    nullAlert: ''\n  }\n\n  getPhotos = async (e) => {\n    e.preventDefault();\n    const keySearch = this.keySearch.value;\n    const api_call = await fetch(`${API_URL}https://api.unsplash.com/search/photos?per_page=20&query=${keySearch}&client_id=${API_KEY}`);\n    const data = await api_call.json();\n    console.log(data.results);\n\n    this.setState({\n      imgs: data.results,\n      nullAlert: keySearch\n    })\n\n    this.addForm.reset();\n  }\n\n  componentDidMount(){\n    fetch(`https://api.unsplash.com/photos?per_page=30&client_id=${API_KEY}`)\n      .then(response => response.json())\n      .then(data => this.setState({\n        randomImgs: data\n      }))\n  }\n\n  render() {\n    let getPhotos = this.state.imgs.map((img) => {\n      return(\n      <Col md='3' key={img.id}>\n        <Card className='mb-3'>\n          <CardImg top src={img.urls.small} />\n          <CardBody>\n            <CardTitle> \n              { img.description === null ? `${this.state.nullAlert}` : `${img.description.substring(0,15)}...`}\n            </CardTitle>\n            <CardText> Photo by : {img.user.first_name} </CardText>\n            <NavLink href={img.urls.full} target=\"__blank\"> \n              <FontAwesomeIcon icon=\"download\" /> Download ...\n            </NavLink>\n          </CardBody>\n        </Card>\n      </Col>\n    );\n    })\n    \n    const randomText = \"Photo of the Day\";\n    let randomPhotos = this.state.randomImgs.map((randomImg) => {\n      return(\n        <Col md='3' key={randomImg.id}>\n          <Card className='mb-3'>\n          <CardImg top src={randomImg.urls.small} />\n            <CardBody>\n              <CardTitle> \n                {randomImg.description == null ? randomText : `${randomImg.description.substring(0,15)}...`}\n              </CardTitle>\n              <CardText> Photo by : {randomImg.user.name} </CardText>\n              <NavLink href={randomImg.urls.full} target=\"__blank\"> \n                <FontAwesomeIcon icon=\"download\" /> Download ...\n              </NavLink>\n            </CardBody>\n          </Card>\n        </Col>\n      );\n    })\n\n    \n    return (\n      <div id='wrap'>\n        <section className='pickphotos'>\n          <Container>\n            <Row className='mb-3'>\n              <Col lg='8' className='mx-auto'>\n                <div className='headingTitle'>\n                  <h1> <FontAwesomeIcon icon=\"camera\" /> PickPhotos </h1>\n                </div>\n                <Card>\n                  <CardBody>\n                    <form onSubmit={(e) => (this.getPhotos(e))} className='form' ref={(input) => (this.addForm) = input }>\n                    <Row form>\n                      <Col md='10'>\n                        <FormGroup>\n                          <input type='teks' ref={(input) => (this.keySearch) = input } className='form-control' placeholder=\"Search Free Photos...\"/>\n                        </FormGroup>\n                      </Col>\n                      <Col md='2'>\n                        <FormGroup>\n                        <Button block> <FontAwesomeIcon icon=\"search\" /> </Button>\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    </form>\n                  </CardBody>\n                </Card>\n              \n              </Col>\n            </Row>\n            <Row className='mb-3'>\n            { this.state.imgs.length === 0 ? randomPhotos : getPhotos }\n          </Row>\n          </Container>\n        </section>\n        <footer className=\"footer\">\n          <Container fluid>\n            <Row>\n              <Col lg='6' md='6' sm='6'>\n                <Card>\n                  <CardBody>\n                      <i> Copyright © </i>\n                      <a href=\"https://portofolio-sandy.firebaseapp.com/\" target=\"__blank\"> sandy kurniawan </a>\n                  </CardBody>\n                </Card>\n              </Col>\n              <Col lg='6' md='6' sm='6'>\n                <Card>\n                  <CardBody>\n                    <i> Powered: </i>\n                      <a href=\"https://unsplash.com/\" target=\"__blank\"> unsplash.com </a>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\r\nimport {App} from './App';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { faStroopwafel, faDownload, faSearch, faCamera } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faStroopwafel, faDownload, faSearch, faCamera)\r\nexport class Router extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path='/' component={App} exact />\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t);\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Router} from './Router';\nimport './Styles/Css/main.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}